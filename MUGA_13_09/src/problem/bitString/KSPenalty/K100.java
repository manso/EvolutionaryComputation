/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package problem.bitString.KSPenalty;

import genetic.gene.GeneBinary;
import utils.Funcs;
/*
 * # Bests :11 [3 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000
 * Genome:
 * 1110000111001111111110011110110010111011111100010111011100111111001011010111011010110000001101110101
 * [1 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 1110000111001111111110001110111010110011111100010111011100111111001011010111011010110001001101110101
 * [1 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 1110010111001111111110001110110010110011111100010111011100111111001011010111011010110000001101110101
 * [3 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 0110000111001111111110001110111010110011011100010111011100111111001111010111011010110000001101110101
 * [1 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 0110000111001111111110011110110010110011111110010111011100111111001011010111011010110000001101110101
 * [1 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 1110000111001111111110001110110010110011111100010111011101111111001011010111011010110000001101110101
 * [3 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 0110000111001111111110001110110010111011011100010111011100111111001111010111011010110000001101110101
 * [1 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 1110000111001111111110001110110010111011111100010111011100111111001011010111011010110001001101110101
 * [2 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 1110000111001111111110011110111010110011111100010111011100111111001011010111011010110000001101110101
 * [2 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 1110000111001111111110001110110010110011011110010111011100111111001011010111011010110000001101110101
 * [2 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 0110000111001111111110001110110010110011111110010111011100111111001011010111011010110001001101110101
 * # Bests :11 [3 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000
 * Genome:
 * 0110000111001111111110001110111010110011011100010111011100111111001111010111011010110000001101110101
 * [3 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 1110000111001111111110001110110010110011111100010111011101111111001011010111011010110000001101110101
 * [2 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 1110000111001111111110001110110010111011111100010111011100111111001011010111011010110001001101110101
 * [2 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 1110000111001111111110001110111010110011111100010111011100111111001011010111011010110001001101110101
 * [1 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 0110000111001111111110011110110010110011111110010111011100111111001011010111011010110000001101110101
 * [5 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 0110000111001111111110001110110010111011011100010111011100111111001111010111011010110000001101110101
 * [1 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 1110000111001111111110011110110010111011111100010111011100111111001011010111011010110000001101110101
 * [3 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 1110010111001111111110001110110010110011111100010111011100111111001011010111011010110000001101110101
 * [4 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 1110000111001111111110011110111010110011111100010111011100111111001011010111011010110000001101110101
 * [3 ]Profit: 1561,000000 Height: 1352,000000 Fitness: 1561,000000 Genome:
 * 1110000111001111111110001110110010110011011110010111011100111111001011010111011010110000001101110101
 *
 *
 */

/**
 *
 * @author manso
 */
public class K100 extends Knapsack {

    private static double w100[] = {
        24, 8, 8, 38, 33, 40, 50, 21, 24, 15, 33, 45, 16, 22, 7, 32, 33, 33, 16, 14,
        23, 25, 33, 14, 7, 32, 36, 46, 11, 50, 26, 38, 46, 49, 7, 36, 26, 19, 6, 38,
        10, 18, 45, 9, 50, 47, 38, 15, 42, 11, 24, 9, 49, 2, 13, 44, 31, 40, 28, 35,
        32, 5, 39, 7, 43, 35, 23, 48, 28, 8, 26, 4, 21, 47, 33, 2, 42, 11, 15, 49,
        16, 44, 12, 33, 33, 22, 15, 14, 28, 39, 31, 30, 37, 19, 14, 33, 39, 10, 46, 32};
    private static double p100[] = {
        26, 10, 13, 39, 34, 43, 52, 24, 27, 17, 35, 47, 18, 25, 8, 35, 36, 36, 21, 16,
        27, 26, 34, 15, 12, 35, 40, 47, 14, 55, 28, 40, 51, 51, 8, 41, 28, 20, 11, 42,
        11, 23, 49, 13, 54, 49, 40, 18, 45, 13, 28, 12, 51, 4, 15, 48, 33, 43, 32, 39,
        36, 7, 44, 11, 45, 36, 27, 52, 33, 11, 27, 6, 22, 52, 36, 7, 45, 13, 17, 52,
        19, 47, 15, 38, 35, 23, 16, 15, 30, 42, 34, 34, 39, 21, 18, 37, 41, 13, 48, 36};

    static {
        sort(p100, w100);
    }

    public K100() {
        super();
        if (numItens != w100.length || w100 != w) {
            numItens = w100.length;
            w = w100;
            p = p100;
            calcTotalValue();
            calcTotalCapacity();
            averageCapacity();
        }
        setBest(1561);
        addGene(new GeneBinary(w100.length));
    }

    @Override
    public double fitness() {
        double val = valueSack(this.getBits());
        double height = heightSack(this.getBits());
        double pen = penaltyLinear(height);
        return val - pen;
    }

    @Override
    public void setParameters(String param) {
        numItens = w100.length;
        w = w100;
        p = p100;
        calcTotalValue();
        calcTotalCapacity();
        averageCapacity();
        setBest(1561);
    }

    public String getGenomeInformation() {
        // public String getInfo() {
        StringBuilder buf = new StringBuilder();
        buf.append("\n" + this.getClass().getSimpleName());
        buf.append("\n\nSack Capacity:" + capacity + " / " + totalCapacity + " = " + (capacity / totalCapacity) * 100.0 + "%");
        buf.append("\nBest Value   :" + getBest());
        
        buf.append("\nElements     :" + numItens);
        buf.append("\n\nItem      = ");
        for (int i = 0; i < w.length; i++) {
            buf.append(Funcs.IntegerToString(i, 6));
        }
        buf.append("\nWeight    = ");
        for (int i = 0; i < w.length; i++) {
            buf.append(Funcs.DoubleToString(w[i], 6));
        }
        buf.append("\nProfit    = ");
        for (int i = 0; i < p.length; i++) {
            buf.append(Funcs.DoubleToString(p[i], 6));
        }
       return buf.toString();

    }
};
